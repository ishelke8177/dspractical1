// StringConcat.idl:

module StringConcatApp {
    interface StringConcat {
        string concatenate(in string str1, in string str2);
    };
};

// StringConcatImpl.java:

import StringConcatApp.StringConcatPOA;

public class StringConcatImpl extends StringConcatPOA {
    @Override
    public String concatenate(String str1, String str2) {
        return str1 + str2;
    }
}

// StringConcatServer.java:

import org.omg.CORBA.*;
import org.omg.CosNaming.*;

public class StringConcatServer {
    public static void main(String[] args) {
        try {
            // Create and initialize the ORB
            ORB orb = ORB.init(args, null);

            // Create the string concatenation object
            StringConcatImpl stringConcatImpl = new StringConcatImpl();

            // Get a reference to the root POA and activate the object
            org.omg.CORBA.Object objRef = orb.resolve_initial_references("RootPOA");
            POA rootPOA = POAHelper.narrow(objRef);
            rootPOA.the_POAManager().activate();

            // Associate the string concatenation object with a unique object ID
            objRef = rootPOA.servant_to_reference(stringConcatImpl);

            // Bind the object reference with a name in the naming service
            NamingContextExt ncRef = NamingContextExtHelper.narrow(orb.resolve_initial_references("NameService"));
            NameComponent[] nameComponents = ncRef.to_name("StringConcat");
            ncRef.rebind(nameComponents, objRef);

            System.out.println("StringConcat server is running...");

            // Wait for invocations from clients
            orb.run();
        } catch (Exception e) {
            System.err.println("StringConcat server exception: " + e);
            e.printStackTrace();
        }
    }
}
